version: "3.3"

services:
    nginx:
        image: nginx
        container_name: nginx
        build:
            context: ./nginx
        ports:
            - 80:80
            - 443:443
        networks:
            - app_network
            - local
        restart: always
        # healthcheck:
        #     test: curl -f http://localhost:5000/api/healthcheck  &
        #         curl -k -f https://localhost/app/api/healthcheck &
        #     interval: 10s
        #     timeout: 2s
        #     retries: 3
                
    task_manager:
        image: task_manager
        container_name: task_manager
        build:
            context: ./app
            dockerfile: Dockerfile.1
        networks:
            - app_network
            - mongo_network
            - redis_network
            - local
        depends_on:
            - mongo
            - redis
        restart: always
        environment:
            MONGO_URI: mongodb://${mongo_username}:${mongo_password}@${mongo_hostname}/${mongo_database_name}?authSource=admin${replicaset}
        # healthcheck:
        #     test: celery -A task inspect ping
        #     interval: 10s
        #     timeout: 2s
        #     retries: 3

    app:
        image: app
        container_name: app
        build:
            context: ./app
        depends_on:
            - mongo
            - redis
        
        networks:
            - app_network
            - mongo_network
            - redis_network
            - local
        restart: always

        environment:
            MONGO_URI: mongodb://${mongo_username}:${mongo_password}@${mongo_hostname}/${mongo_database_name}?authSource=admin${replicaset}
            DB_NAME: ${mongo_database_name}
        healthcheck:
            test: uwsgi_curl -t 5 127.0.0.1:5000 /api/healthcheck || kill 1
            interval: 10s
            timeout: 2s
            retries: 3
    

        
    postgres:
        image: postgres:11
        container_name: postgres_docker
        environment:
            POSTGRES_PASSWORD: ${postgres_password}
        #TODO kapatÄ±lacak
        volumes:
        - postgres_data:/var/lib/postgresql/data
        networks: 
        - postgres_network
        restart: always
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U postgres"]
            interval: 10s
            timeout: 2s
            retries: 3


    adminer:
        image: adminer
        restart: always
        ports:
        - ${adminer_bind}:8080:8080
        networks: 
        - postgres_network
    
    mongo:
        image: mongo
        container_name: mongodb_docker
        environment:
            MONGO_INITDB_ROOT_USERNAME: ${mongo_username}
            MONGO_INITDB_ROOT_PASSWORD: ${mongo_password}
        volumes:
            - mongo_data:/data/db

        command: --bind_ip_all
        networks:
            - mongo_network
            - local
        restart: always
        healthcheck:
            test: echo 'db.runCommand("ping").ok' | mongo mongo:27017/test --quiet
            interval: 10s
            timeout: 2s
            retries: 3

    mongo-express:
        image: mongo-express:0.54.0
        container_name: mongo_express
        ports:
            - ${mongo_express_bind}:8081:8081
        environment:
            ME_CONFIG_MONGODB_ADMINUSERNAME: ${mongo_username}
            ME_CONFIG_MONGODB_ADMINPASSWORD: ${mongo_password}
            ME_CONFIG_BASICAUTH_USERNAME: ${mongo_username}
            ME_CONFIG_BASICAUTH_PASSWORD: ${mongo_password}
            #ME_CONFIG_MONGODB_SERVER: ${mongo_hostname}
        depends_on:
            - mongo
        networks:
            - mongo_network
            - local

        restart: always

    redis:
        image: "redis:alpine"
        hostname: redis
        container_name: redis

        depends_on:
            - mongo
        networks:
            - redis_network
            - local
        volumes:
            - redis_data:/data
        restart: always
        healthcheck:
            test: ["CMD", "redis-cli", "ping"]
            interval: 1s
            timeout: 3s
            retries: 30
    

networks:
    mongo_network:
        driver: bridge
    redis_network:
        driver: bridge
    app_network:
        driver: bridge
    register_and_notify_network:
        driver: bridge
    postgres_network:
        driver: bridge
    local:
        driver: bridge

volumes:
    redis_data:
        driver: local
        driver_opts:
            type: none
            device: $PWD/data/redis
            o: bind
    mongo_data:
        driver: local
        driver_opts:
            type: none
            device: $PWD/data/mongo
            o: bind
    postgres_data:
        driver: local
        driver_opts:
            type: none
            device: $PWD/data/postgres
            o: bind